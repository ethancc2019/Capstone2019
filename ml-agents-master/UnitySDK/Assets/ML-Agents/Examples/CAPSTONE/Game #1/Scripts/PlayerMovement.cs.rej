diff a/ml-agents-master/UnitySDK/Assets/ML-Agents/Examples/CAPSTONE/Game #1/Scripts/PlayerMovement.cs b/ml-agents-master/UnitySDK/Assets/ML-Agents/Examples/CAPSTONE/Game #1/Scripts/PlayerMovement.cs	(rejected hunks)
@@ -21,37 +21,34 @@
         // is the controller on the ground?
         if (controller.isGrounded)
         {
+            //Feed moveDirection with input.
             moveDirection = new Vector3(Input.GetAxis("Horizontal"), 0, Input.GetAxis("Vertical"));
             moveDirection = transform.TransformDirection(moveDirection);
+            //Multiply it by speed.
             moveDirection *= speed;
+            //Jumping
             if (Input.GetButton("Jump"))
-            {
                 moveDirection.y = jumpSpeed;
-            }
-        }
-        else
-        {
-            moveDirection = new Vector3(Input.GetAxis("Horizontal"), moveDirection.y, Input.GetAxis("Vertical"));
-            moveDirection = transform.TransformDirection(moveDirection);
-            moveDirection.x *= speed;
-            moveDirection.z *= speed;
+
         }
         //Applying gravity to the controller
-        moveDirection.y -= (-Physics2D.gravity.y) * (fallMultiplier - 1) * Time.deltaTime;
+        moveDirection.y -= gravity * Time.deltaTime;
+        //Making the character move
         controller.Move(moveDirection * Time.deltaTime);
-        Debug.Log("moveDirection: " + moveDirection + "vel: " + controller.velocity);
 
         //Player fell off platform, reset him to the first spawn point
         if (this.transform.position.y <= -1)
         {
-            ResetPlayer();
+            
+            resetPlayer();
         }
 
     }
 
-    public void ResetPlayer()
+    public void resetPlayer()
     {
         gameManger.GetComponent<GameManager>().decreaseScore();
         this.transform.position = spawnPointOne.position;
     }
-}
\ No newline at end of file
+}
+ 
\ No newline at end of file
